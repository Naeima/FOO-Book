Traceback (most recent call last):
  File "C:\Python310\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Python310\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Python310\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Python310\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Python310\lib\asyncio\base_events.py", line 641, in run_until_complete
    return future.result()
  File "C:\Python310\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Python310\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Python310\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Install dependencies
#!pip install rdflib gradio

from rdflib import Graph
import gradio as gr

# Load RDF
foo_KG = Graph()
foo_KG.parse("https://naeima.github.io/fooKG/index.ttl", format="ttl")

# Handler function for supported questions
def handle_question(question):
    try:
        q = question.lower()

        # üìç GPS OBSERVATION
        if "gps" in q or "location" in q:
            query = """
            PREFIX foo: <https://w3id.org/def/foo#>
            SELECT ?id ?latitude ?longitude ?localDate
            WHERE {
              ?s a foo:gPSObservation ;
                 foo:id ?id ;
                 foo:latitude ?latitude ;
                 foo:longitude ?longitude ;
                 foo:localDate ?localDate .
            }
            ORDER BY ?localDate
            LIMIT 5
            """
            results = foo_KG.query(query)
            rows = [row.asdict() for row in results]
            return "\n\n".join([
                f"üõ∞Ô∏è ID: {r['id']}, üåç Lat: {r['latitude']}, Long: {r['longitude']}, üìÖ Date: {r['localDate']}"
                for r in rows
            ]) if rows else "No GPS data found."

        # üå≥ TREE / LIANA OBSERVATION
        elif "tree" in q or "liana" in q or "plot" in q:
            query = """
            PREFIX foo: <https://w3id.org/def/foo#>
            SELECT ?id ?treeID ?treeHeightM ?treeDbhCm ?treeNLianas ?sitePlotCode ?siteName
            WHERE {
              ?s a foo:treeObservation ;
                 foo:id ?id ;
                 foo:treeID ?treeID ;
                 foo:treeHeightM ?treeHeightM ;
                 foo:treeDbhCm ?treeDbhCm ;
                 foo:treeNLianas ?treeNLianas ;
                 foo:sitePlotCode ?sitePlotCode ;
                 foo:siteName ?siteName .
            }
            LIMIT 5
            """
            results = foo_KG.query(query)
            rows = [row.asdict() for row in results]
            return "\n\n".join([
                f"üå≥ Tree ID: {r['treeID']} ({r['id']}), Height: {r['treeHeightM']} m, DBH: {r['treeDbhCm']} cm, Lianas: {r['treeNLianas']}, Plot: {r['sitePlotCode']} @ {r['siteName']}"
                for r in rows
            ]) if rows else "No tree/liana observations found."

        # üß™ SOIL OBSERVATION
        elif "soil" in q or "ph" in q or "clay" in q or "carbon" in q or "nitrogen" in q:
            query = """
            PREFIX foo: <https://w3id.org/def/foo#>
            SELECT ?identifier ?soilPH ?totalC ?totalN ?cNRatio ?plotName ?landUse ?site
            WHERE {
              ?s a foo:Observation ;
                 foo:identifier ?identifier ;
                 foo:soilPH ?soilPH ;
                 foo:totalC ?totalC ;
                 foo:totalN ?totalN ;
                 foo:cNRatio ?cNRatio ;
                 foo:plotName ?plotName ;
                 foo:landUse ?landUse ;
                 foo:site ?site .
            }
            LIMIT 5
            """
            results = foo_KG.query(query)
            rows = [row.asdict() for row in results]
            return "\n\n".join([
                f"üß™ Site: {r['site']} ({r['plotName']}, {r['identifier']}), pH: {r['soilPH']}, C: {r['totalC']}, N: {r['totalN']}, C/N: {r['cNRatio']}, Land use: {r['landUse']}"
                for r in rows
            ]) if rows else "No soil data found."

        else:
            return "I support questions about GPS observations, tree/liana features, and soil chemistry. Try asking about tree height, GPS data, or soil pH."

    except Exception as e:
        return f"‚ùå Error: {e}"

# Gradio Interface
gr.Interface(
    fn=handle_question,
    inputs=gr.Textbox(lines=2, placeholder="Ask about GPS, trees, or soil observations..."),
    outputs="text",
    title="FOO Chatbot",
    description="Ask questions about GPS, tree/liana, and soil observations from FOO.",
    examples=[
        "Show me GPS observation data.",
        "How many GPS observations are there?",
        "List liana observations with tree heights.",
        "What is the soil pH at Maliau Basin?",
        "Show me soil nitrogen and carbon values.",
        "Where are trees with more than 5 lianas?",
        "Give me site and plot info for tree observations."
    ]
).launch(share=True, debug=True)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [1;32mIn [1][0m, in [0;36m<cell line: 5>[1;34m()[0m
[0;32m      1[0m [38;5;66;03m# Install dependencies[39;00m
[0;32m      2[0m [38;5;66;03m#!pip install rdflib gradio[39;00m
[0;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01mrdflib[39;00m [38;5;28;01mimport[39;00m Graph
[1;32m----> 5[0m [38;5;28;01mimport[39;00m [38;5;21;01mgradio[39;00m [38;5;28;01mas[39;00m [38;5;21;01mgr[39;00m
[0;32m      7[0m [38;5;66;03m# Load RDF[39;00m
[0;32m      8[0m foo_KG [38;5;241m=[39m Graph()

[1;31mModuleNotFoundError[0m: No module named 'gradio'
ModuleNotFoundError: No module named 'gradio'

